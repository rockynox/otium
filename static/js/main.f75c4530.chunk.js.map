{"version":3,"sources":["firebase.js","actions/index.js","reducers/index.js","reducers/data.js","components/ListItem.js","components/List.js","App.js","serviceWorker.ts","index.js"],"names":["firebase","apiKey","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","todosRef","ref","child","FETCH_TODOS","addToDo","newToDo","dispatch","a","push","set","completeToDo","completedToDo","remove","fetchToDos","dispach","on","snapshot","type","payload","val","combineReducers","data","state","action","ListItem","completeClick","completeTodoId","props","this","todoId","todo","key","className","title","onClick","Component","connect","List","showForm","formValue","inputChange","event","setState","target","value","formSubmit","preventDefault","renderForm","id","onSubmit","onChange","htmlFor","toDos","_","map","isEmpty","renderToDo","actions","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f75c4530.chunk.js","sourcesContent":["import * as firebase from 'firebase';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBvsWFh1ObECBcMXLhCoibc87BDSFEsZIE\",\n  databaseURL: \"https://otium-95ca2.firebaseio.com\",\n  projectId: \"otium-95ca2\",\n  storageBucket: \"otium-95ca2.appspot.com\",\n  messagingSenderId: \"692406720774\",\n  appId: \"1:692406720774:web:bc2b43432e0c6df958e687\",\n  measurementId: \"G-EVPJKBZ4QH\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nconst databaseRef = firebase.database().ref();\nexport const todosRef = databaseRef.child(\"todos\");\n","import {todosRef} from \"../firebase\";\n\nexport const FETCH_TODOS = 'FETCH_TODOS';\n\nexport const addToDo = newToDo => async dispatch => {\n  todosRef.push().set(newToDo);\n};\n\nexport const completeToDo = completedToDo => async dispatch => {\n  todosRef.child(completedToDo).remove();\n};\n\nexport const fetchToDos = () => async dispach => {\n  todosRef.on(\"value\", snapshot => {\n    dispach({\n      type: FETCH_TODOS,\n      payload: snapshot.val()\n    });\n  });\n};\n","import {combineReducers} from \"redux\";\nimport data from \"./data\";\n\nexport default combineReducers({\n    data\n});\n","import {FETCH_TODOS} from \"../actions\";\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n    case FETCH_TODOS:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {completeToDo} from '../actions';\n\nclass ListItem extends Component {\n  completeClick = completeTodoId => {\n    const {completeToDo} = this.props;\n    completeToDo(completeTodoId);\n  };\n  render() {\n    const{todoId, todo} = this.props;\n    return (\n        <div key=\"toDoName\" className=\"col s10 offset-s1 to-do-list-item black\">\n          <h4>\n            {todo.title}\n            <span\n                onClick={() => this.completeClick(todoId)}\n                className=\"complete-todo-item waves-effect waves-light blue lighten-5 blue-text text-darken-4 btn\"\n            >\n            <i className=\"large material-icons\">Done</i>\n          </span>\n          </h4>\n        </div>\n    );\n  }\n}\n\nexport default connect(null, {completeToDo})(ListItem);\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport _ from 'lodash';\nimport * as actions from '../actions';\nimport ListItem from './ListItem';\nimport \"./style.css\";\n\nclass List extends Component {\n  state = {\n    showForm: false,\n    formValue: \"\"\n  };\n\n  inputChange = event => {\n    this.setState({formValue: event.target.value});\n  };\n\n  formSubmit = event => {\n    const {formValue} = this.state;\n    const {addToDo} = this.props;\n    event.preventDefault();\n    addToDo({title: formValue});\n    this.setState({formValue: \"\"});\n  };\n\n  renderForm = () => {\n    const {showForm, formValue} = this.state;\n    if (showForm) {\n      return (\n          <div id=\"todo-add-form\" className=\"col s10 offset-s1\">\n            <form onSubmit={this.formSubmit}>\n              <div className=\"input-field\">\n                <input\n                    value={formValue}\n                    onChange={this.inputChange}\n                    id=\"toDoNext\"\n                    type=\"text\"\n                />\n                <label htmlFor=\"toDoNext\">What Next?</label>\n              </div>\n            </form>\n          </div>\n      );\n    }\n  };\n\n  renderToDo() {\n    const {data} = this.props;\n    const toDos = _.map(data, (todo, todoId) => {\n      return <ListItem key={todoId} todoId={todoId} todo={todo}/>;\n    });\n    if (!_.isEmpty(toDos)) {\n      return toDos;\n    }\n    return (\n        <div className=\"col s10 offset-s1 center-align\">\n          <h4>You have no more things ToDo!</h4>\n        </div>\n    );\n  }\n\n  componentWillMount() {\n    this.props.fetchToDos();\n  }\n\n  render() {\n    const {showForm} = this.state;\n    return (\n        <div className=\"to-do-list-container\">\n          <div className=\"row\">\n            {this.renderForm()}\n            {this.renderToDo()}\n          </div>\n          <div className=\"fixed-action-btn\">\n            <button\n                onClick={() => this.setState({showForm: !showForm})}\n                className=\"btn-floating btn-large black darken-4\"\n            >\n              {showForm ? (\n                  <i className=\"large material-icons\">-</i>\n              ) : (\n                  <i className=\"large material-icons\">+</i>\n              )}\n            </button>\n          </div>\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({data}) => {\n  return {\n    data\n  };\n};\n\nexport default connect(mapStateToProps, actions)(List);\n","import React, {Component} from 'react';\nimport List from './components/List';\n\nclass App extends Component {\n  render() {\n    return (\n        <div className=\"container\">\n          <List/>\n        </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"materialize-css/dist/css/materialize.min.css\";\nimport \"materialize-css/dist/js/materialize.min.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {applyMiddleware, createStore} from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport reducers from './reducers';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducers, {}, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n    <Provider store={store}>\n      <App/>\n    </Provider>,\n    document.getElementById(\"root\")\n);\nserviceWorker.register();\n"],"sourceRoot":""}